To implement a queue in C, I would choose a linked list.

The linked list has the advantage of allowing the insertion and removal of elements in constant time, regardless of the queue size. Furthermore, the linked list can be easily dynamically resized during program execution, allowing the queue to grow or shrink as needed. This is especially useful if the maximum queue size is not known in advance or if the queue needs to be dynamically resized to meet the requirements of the problem.

Furthermore, the linked list is easy to implement in C and consumes less memory than an array-based queue, as it does not require a fixed memory space to store the entire queue. In a linked list, each node stores only one element and a pointer to the next node in the list, saving memory space.

Finally, the linked list allows elements to be added or removed from both sides of the queue, allowing the implementation of priority queues or two-ended queues. In summary, the linked list is a solid and flexible choice for implementing queues in C.